#include <WiFi.h>
#include <PubSubClient.h>

//DHT11
#include "DHT.h"
#define DHTPIN 13     
#define DHTTYPE DHT11 
#define gasSensorPin  34
#define FLAME_AN_PIN       27 

DHT dht(DHTPIN, DHTTYPE);

// Update these with values suitable for your network.
const char* ssid = "OPPO A96";
const char* password = "12345678";
const char* mqtt_server = "broker.mqtt-dashboard.com";

uint16_t analog_flame_value = 0;
uint16_t flame_percentage = 0;


WiFiClient espClient;
PubSubClient client(espClient);
//unsigned long lastMsg = 0;
long lastMsg = 0;
char msg[50];
int value = 0;

const int trigPin = 5;
const int echoPin = 18;



void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      client.subscribe("/esp32/mqtt/in");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
      

    }
  }
}
long readUltrasonicDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  return duration * 0.034 / 2;
}


void setup() {
  Serial.begin(115200);
  setup_wifi();
  dht.begin();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  long now = millis();
  if (now - lastMsg > 5000) {
    lastMsg = now;
    
  //dht11
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();

      // Convert the value to a char array
    char tempString[8];
    dtostrf(t, 1, 2, tempString);
    Serial.print("Temperature: ");
    Serial.println(tempString);
    client.publish("/esp32-mqtt/temp", tempString);
   
    // Convert the value to a char array
    char humString[8];
    dtostrf(h, 1, 2, humString);
    Serial.print("Humidity: ");
    Serial.println(humString);
    client.publish("/esp32-mqtt/humi", humString);

    //flame
    analog_flame_value = analogRead(FLAME_AN_PIN);
    flame_percentage = map(analog_flame_value, 0, 4095, 100, 0);

    char f[4] = {0};

    f[0] = flame_percentage / 100 + '0';
    f[1] += (flame_percentage / 10) % 10 + '0';
    f[2] += flame_percentage % 10 + '0';

    /* Sending Data to Node-Red */
    char flameString[8];
    client.publish("/esp32-mqtt/EhabFlame", flameString);
    Serial.print("Flame: ");
    Serial.print(flame_percentage);
    Serial.println("%");

    //sensor gas
    lastMsg = now;
    value = analogRead(gasSensorPin);
    snprintf (msg, 75, "Gas Level: %d", value);
    Serial.print("Publishing message: ");
    Serial.println(msg);
    client.publish("/esp32-mqtt/homegasSensor", msg);


    //jarak
  long distance = readUltrasonicDistance();
  Serial.print("Distance: ");
  Serial.println(distance);

  char msg[50];
  snprintf(msg, 50, "Distance: %ld", distance);
  client.publish("/esp32-mqtt/sensorultrasonic", msg);
  }
}

